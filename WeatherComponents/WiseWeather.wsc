<?xml version="1.0" ?>
<package>
	<comment>
<![CDATA[
'vim:set sts=4 sw=4 ts=4 ignorecase:
'tabs=4
-----------------------------------------------------------------------------------------

Wise Global Weather Server for ACP
==================================================

Script:         WiseWeather.wsc
Author:         Arie Blumenzweig <theblumz@gmail.com>
Version:        1.0
Requires:       ACP 8.0 or later
                Windows Script 5.6 or later (installed by ACP setup)

Description:    This ACP Weather Server queries the central SafeToOperate
		        ASCOM SafetyMonitor served by the ASCOM Remote Server (Alpaca)
				running on the site's central machine (132.6.65.9).

				It gets a boolean reflecting whether it is now safe to operate and
				returns it as its get_Safe() value.

				This setup allows centralized safety decisions to be used by all the 
				observatories at the Wise campus.
                
Environment:    This is a Windows Script Component. Once registered (with regsvr32) it
                provides ACP and its scripts with Weather information. This component
                is responsible for providing the interface with a weather sensor. You
                May use the ASCOM Serial device to communicate via RS-232 or if the 
                weather sensor has an ActiveX/Scriptable interface, you may create an
                instance of the object, and call directly into that interface.
                
Edit History:
    09-Feb-2020   Initial Edit including new GUID!
-----------------------------------------------------------------------------------------
]]>
	</comment>
	<component id="ACP.WiseWeather">
		<?component error="true" debug="false" ?>
		<registration progid="ACP.WiseWeather" classid="{9c06acbc-fc77-4716-8454-b1135f1b6e34}" description="Queries the central SafeToOperate.SafetyMonitor at Wise" remotable="no" version="1.0">
		</registration>
		<public>
			<method name="SetupDialog">
			</method>
			<property name="Connected">
				<get/>
				<put/>
			</property>
			<property name="AmbientTemperature">
				<get/>
			</property>
			<property name="BarometricPressure">
				<get/>
			</property>
			<property name="Clouds">
				<get/>
			</property>
			<property name="DewPoint">
				<get/>
			</property>
			<property name="Name">
				<get/>
			</property>
			<property name="Precipitation">
				<get/>
			</property>
			<property name="RelativeHumidity">
				<get/>
			</property>
			<property name="Safe">
				<get/>
			</property>
			<property name="SkyTemperature">
				<get/>
			</property>
			<property name="WindDirection">
				<get/>
			</property>
			<property name="WindVelocity">
				<get/>
			</property>
		</public>

		<script id="WiseWeather" language="VBScript">

<![CDATA[

    Option Explicit

    const SVR_VERSION = "1.0.0"
    const PROG = "WiseWeather"
    const ERR_SOURCE = "ACP.WiseWeather"
    const PRP = "Property "				' Common bits for error messages
    const NTI = " is not implemented"
    '
    ' Manifest constants from Clarity II
    '
    const cloudUnknown = 0
    const cloudClear = 1
    const cloudCloudy = 2
    const cloudVeryCloudy = 3
    const cloudWet = 4      ' Boltwood I only
    const windUnknown = 0
    const windCalm = 1
    const windWindy = 2
    const windVeryWindy = 3
    const rainUnknown = 0
    const rainDry = 1
    const rainWet = 2      'sensor has water on it
    const rainRain = 3     'falling rain drops detected
    const dayUnknown = 0
    const dayDark = 1
    const dayLight = 2
    const dayVeryLight = 3
    const windUnitsKMH = 0
    const windUnitsMPH = 1
    const windUnitsMS = 2
    const skyUnknown = 0
    const skyClear = 1
    const skyCloudy = 2
    const skyVeryCloudy = 3
    const skyWet = 4

    '
    ' Code outside of any function or Sub is executed when this object is created.
    '
    dim connected                 : connected = false
    dim lastIsSafeQueryTime       : lastIsSafeQueryTime = cdate(now - #00:01:00#)
    dim lastSafe                  : lastSafe = true
    dim local_station_is_reliable : local_station_is_reliable = false	' Should be set to True if the Boltwood station provides reliable data, to False otherwise
    dim lastUnsafeReasons         : lastUnsafeReasons = ""
    dim ClarityII                 : set ClarityII = Nothing

    dim acp_util   : set acp_util   = createobject("ACP.Util")
    dim wise_util  : set wise_util  = createobject("Wise.Util")
    dim wise_ascom : set wise_ascom = createobject("Wise.Ascom")
    dim wise_tele  : set wise_tele  = createobject("Wise.Tele")
    dim obs        : obs = wise_util.observatory

    if lcase(acp_util.Profile.GetValue("WiseWeather", "LocalStationIsReliable", "False")) = "true" Then
        local_station_is_reliable = true
    else
        local_station_is_reliable = false
    end if

    if local_station_is_reliable and ClarityII is Nothing Then
        Set ClarityII = CreateObject("ClarityII.CloudSensorII")
    end if

    '------------------------------------------------------------------------------
    ' Method SetupDialog()
    '
    ' Parameters:   (none)
    ' Returns:      (nothing)
    '
    ' Invokes the weather access setup dialog. I put in a file selection dialog,
    ' courtesy of ACP's Util object which you have use of automatically here.
    '------------------------------------------------------------------------------
    sub SetupDialog()
        dim response

        response = InputBox("The Wise server's IP address", "Server address", wise_ascom.server)
        if not isempty(response) then
            wise_ascom.server = response
        end if

        response = InputBox("The Wise server's IP port", "Server port", wise_ascom.port)
        if not isempty(response) then
            wise_ascom.port = response
        end if	

        local_station_is_reliable = acp_util.profile.getvalue("WiseWeather", "LocalStationIsReliable")
        dim default_button
        if local_station_is_reliable then
            default_button = vbDefaultButton1
        else
            default_button = vbDefaultButton2
        end if
        response = MsgBox("Is the local weather station reliable?", vbYesNo + default_button)
        if response = vbYes Then
            local_station_is_reliable = True
        else
            local_station_is_reliable = False
        end if
        acp_util.Profile.WriteValue "WiseWeather", local_station_is_reliable, "LocalStationIsReliable"

        response = InputBox("Telescope altitude limit", "Alt limit (degrees):", wise_tele.alt_limit)
        if response <> "" Then
            wise_tele.alt_limit = response
        end if

        response = InputBox("Telescope parking HourAngle", "HourAngle (hours):", wise_tele.parking_ha)
        if response <> "" Then
            wise_tele.parking_ha = response
        end if

        response = InputBox("Telescope parking Declination", "Declination (degrees):", wise_tele.parking_dec)
        if response <> "" Then
            wise_tele.parking_dec = response
        end if

    end sub

    function is_success(s)
        is_success = left(s, 6) <> "error:"
    end function

    '------------------------------------------------------------------------------
    ' Property Connected (R/W, REQUIRED)
    '
    ' True means weather sensor is connected and operating (Boolean). 
    ' Set True to connect.
    '------------------------------------------------------------------------------
    ' dim Connected									            ' PrimalScript UI target (typ.)
    function get_Connected()
        get_Connected = connected
    end function

    function put_Connected(newValue)
        connected = newValue

        if newValue Then
            wise_util.trace " "
            wise_util.trace "Connected (observatory: " & obs & ", local_station_is_reliable: " & local_station_is_reliable & ", use_local_station: " & use_local_station & ")"
            wise_tele.check_limits
        else
            wise_util.trace "Disconnected"
        end if
    end function

    function use_local_station() 
        use_local_station = local_station_is_reliable and not ClarityII is Nothing
    end function

    '------------------------------------------------------------------------------
    ' Property AmbientTemperature (R/O, OPTIONAL)
    '
    ' The ambient (outside) air temperature (Single, deg.C)
    '------------------------------------------------------------------------------
    ' dim AmbientTemperature
    function get_AmbientTemperature()
        dim response

        response = wise_ascom.get_url("observingconditions/0/temperature")
        if is_success(response) Then
            get_AmbientTemperature = response
        elseif use_local_station Then
            get_AmbientTemperature = ClarityII.AmbientT
        end if
        wise_util.trace "get_AmbientTemperature => " & get_AmbientTemperature
    end function

    '------------------------------------------------------------------------------
    ' Property BarometricPressure (R/O, OPTIONAL)
    '
    ' The barometric pressure (Single, millibars)
    ' NOTE: This must be in millibars, per international aviation weather reporting
    '       standards.
    '------------------------------------------------------------------------------
    ' dim BarometricPressure
    function get_BarometricPressure()
        dim response

        response = wise_ascom.get_url("observingconditions/0/pressure")
        if is_success(response) Then
            get_BarometricPressure = response
        end if
        wise_util.trace "get_BarometricPressure => " & get_BarometricPressure
    end function

    '------------------------------------------------------------------------------
    ' Property Clouds (R/O, OPTIONAL)
    '
    ' Cloud coverage (Single, fractional 0-1)
    '------------------------------------------------------------------------------
    ' dim Clouds
    function get_Clouds()
        dim response

        response =  wise_ascom.get_url("observingconditions/0/cloudcover")
        if is_success(response)  Then
            get_Clouds = response
        elseif use_local_station Then
            select case ClarityII.CloudCondition
                case cloudClear
                    get_Clouds = 0.0
                case cloudClear
                    get_Clouds = 0.5
                case cloudVeryCloudy
                    get_Clouds = 0.9
                case cloudUnknown
                    get_Clouds = 0.0
            end select
        end if
        wise_util.trace "get_Clouds => " & get_Clouds
    end function

    '------------------------------------------------------------------------------
    ' Property DewPoint (R/O, OPTIONAL)
    '
    ' The dew point temperature (Single, deg C)
    '------------------------------------------------------------------------------
    ' dim DewPoint
    function get_DewPoint()
        dim response

        response = wise_ascom.get_url("observingconditions/0/dewpoint")
        if is_success(response) Then
            get_DewPoint = response
        elseif use_local_station Then
            get_DewPoint = ClarityII.DewPointT
        end if
        wise_util.trace "get_DewPoint => " & get_DewPoint
    end function

    '------------------------------------------------------------------------------
    ' Property InsideTemperature (R/O, OPTIONAL)
    '
    ' The temperature inside the observatory (Single, deg C)
    '------------------------------------------------------------------------------
    ' dim InsideTemperature
    function get_InsideTemperature()
        Err.Raise &H80040400, ERR_SOURCE, PRP & "Get InsideTemperature" & NTI
    end function

    '------------------------------------------------------------------------------
    ' Property Name (R/O, OPTIONAL)
    '
    ' The display name of the weather system (String)
    '------------------------------------------------------------------------------
    ' dim Name
    function get_Name()
        get_Name = PROG
    end function

    '------------------------------------------------------------------------------
    ' Property Precipitation (R/O, OPTIONAL)
    '
    ' True if precipitation is present (Boolean)
    '------------------------------------------------------------------------------
    ' dim Precipitation
    function get_Precipitation()
        dim response

        response = wise_ascom.get_url("observingconditions/0/rainrate")
        if is_success(response) Then
            get_Precipitation = response
        elseif use_local_station Then
            get_Precipitation = (ClarityII.RainCondition = rainRain)
        end if
        wise_util.trace "get_Precipitation => " & get_Precipitation
    end function

    '------------------------------------------------------------------------------
    ' Property RelativeHumidity (R/O, OPTIONAL)
    '
    ' The relative humidity (Single, fractional 0-1)
    '------------------------------------------------------------------------------
    ' dim RelativeHumidity
    function get_RelativeHumidity()
        dim response

        response = wise_ascom.get_url("observingconditions/0/humidity")
        if is_success(response) Then
            get_RelativeHumidity = response
        elseif use_local_station Then
            get_RelativeHumidity = ClarityII.HumidityPercent
        end if
        wise_util.trace "get_RelativeHumidity => " & get_RelativeHumidity
    end function

    '------------------------------------------------------------------------------
    ' Property Safe (R/O, REQUIRED)
    '
    ' Return True when weather is safe, False when not. Returning False will
    ' stop any ACP script in progress and cause alarm and shutdown processes
    ' to be initiated.
    '------------------------------------------------------------------------------
    ' dim Safe
    function get_Safe()
        get_Safe = WiseIsSafe

        if not get_Safe And lastSafe Then                ' if this is a change from safe to unsafe
            wise_util.warning("Safety: Wise became unsafe to operate!")
            dim response : response = wise_ascom.put_url("safetymonitor/0/action", "Action=wise-unsafereasons&Parameters=")			

            dim reasons, i
            reasons = unsafereasons2array(response)
            for i = 0 to ubound(reasons) - 1
                wise_util.trace "Safety: unsafereason: " & reasons(i)
            next
        elseif get_safe and not lastSafe Then
            wise_util.info("Safety: Wise became safe to operate!")
        end if
        
        lastSafe = get_Safe
        
    end function

    '------------------------------------------------------------------------------
    ' Property SkyTemperature (R/O, OPTIONAL)
    '
    ' The sky temperature (Single, deg C)
    '------------------------------------------------------------------------------
    ' dim SkyTemperature
    function get_SkyTemperature()
        dim response

        response = wise_ascom.get_url("observingconditions/0/skytemperature")
        if is_success(response)  Then
            get_SkyTemperature = response
        elseif use_local_station Then
            get_SkyTemperature = ClarityII.RelSkyT
        end if
        wise_util.trace "get_SkyTemperature => " & get_SkyTemperature
    end function

    '------------------------------------------------------------------------------
    ' Property WindDirection (R/O, OPTIONAL)
    '
    ' The azimuth FROM which the wind is blowing (Single, deg. magnetic)
    ' NOTE: This must be in degrees MAGNETIC, per international aviation weather 
    '       reporting standards.
    '------------------------------------------------------------------------------
    ' dim WindDirection
    function get_WindDirection()
        dim response

        response = wise_ascom.get_url("observingconditions/0/winddirection")
        if is_success(response) Then
            get_WindDirection = response
        end if
        wise_util.trace "get_WindDirection => " & get_WindDirection
    end function

    function KMHToKnots(kmh)
        KMHToKnots = kmh / 1.852
    end function

    function MPHToKnots(mph)
        MPHToKnots = mph / 1.151
    end function

    function MSToKnots(ms)
        MSToKnots = ms * 1.944
    end function

    function knotstokmh(knots)
        knotstokmh = knots * 1.852
    end function

    '------------------------------------------------------------------------------
    ' Property WindVelocity (R/O, OPTIONAL)
    '
    ' The wind velocity (Single, knots)
    '------------------------------------------------------------------------------
    ' dim WindVelocity
    function get_WindVelocity()
        dim response

        response = wise_ascom.get_url("observingconditions/0/windspeed")
        if is_success(response) Then
            get_WindVelocity = MSToKnots(response)
        elseif use_local_station Then
            select case ClarityII.WindUnits
                case windUnitsKMH
                    get_WindVelocity = KMHToKnots(ClarityII.Wind)
                case windUnitsMPH
                    get_WindVelocity = MPHToKnots(ClarityII.Wind)
                case windUnitsMS
                    get_WindVelocity = MSToKnots(ClarityII.Wind)
            end select

            get_WindVelocity = NormalizedClarityIIWind(ClarityII.Wind)
            wise_util.trace "get_WindVelocity => " & get_WindVelocity & " Clarity.Wind: " & ClarityII.Wind & " Clarity.WindUnits: " & ClarityII.WindUnits
        end if
    end function

    function NormalizedClarityIIWind(value)
        select case obs
            case "c28"
                NormalizedClarityIIWind = value '* 0.80
            case "c18"
                NormalizedClarityIIWind = value '* 0.70
        end select
    end function

    function WiseIsSafe()
        dim response, seconds, i, items, reasons
                
        seconds = datediff("s", lastIsSafeQueryTime, Now)
        if (seconds < 60) Then
            WiseIsSafe = lastSafe
            exit function
        end if

        response = wise_ascom.put_url("safetymonitor/0/action", "Action=wise-issafe&Parameters=")
        'wise_util.trace "[I] remote wise-issafe response '" & response & "', is_success: " & is_success(response) 

        if not is_success(response) Then
            'wise_util.trace "[W] remote wise-issafe response '" & response & "'"
            if use_local_station Then
                dim wind_ok, day_ok, humidity_ok, clouds_ok, data_ok

                if obs = "c28" then
                    wind_ok = true     ' the wind sensor at the c28 is crazy
                else
                    wind_ok = knotstokmh(get_WindVelocity)   <= 45.0
                end if
                day_ok      = ClarityII.DayCondition          = dayDark
                humidity_ok = ClarityII.HumidityPercent      <= 85.0
                clouds_ok   = ClarityII.CloudCondition        = skyClear
                data_ok     = ClarityII.SecondsSinceGoodData <  60

                WiseIsSafe = day_ok and humidity_ok and wind_ok and clouds_ok and data_ok
                if not day_ok then _
                    reasons = reasons & "'not dark' "
                if not humidity_ok then _
                    reasons = reasons & "'humidity above 85%' "
                if not wind_ok then _
                    reasons = reasons & "'wind above 45 Kmh' "
                if not clouds_ok then _
                    reasons = reasons & "'cloudy' "
                if not data_ok then _
                    reasons = reasons & "'data older than 60 seconds' "
                reasons = rtrim(reasons)

                dim msg : msg = "[I] local station is reliable => wiseissafe = " & wiseissafe
                if not wiseissafe then _
                    msg = msg & " (reasons: " & reasons & ")"
                wise_util.trace msg
            else
                WiseIsSafe = False
                wise_util.trace "[I] local station is not reliable => wiseissafe = " & wiseissafe
            end if
        elseif (response = "false") Then
            WiseIsSafe = False
            'wise_util.trace "[I] remote wise-issafe response: '" & response & "' => wiseissafe = " & wiseissafe
            response = wise_ascom.put_url("safetymonitor/0/action", "Action=wise-unsafereasons&Parameters=")			
            if response <> lastUnsafeReasons Then
                lastUnsafeReasons = response
                reasons = unsafereasons2array(response)

                if (instr(response, "HumanIntervention")) then
                    for i = 1 to ubound(reasons) - 1
                        wise_util.trace("Safety: HumanIntervention: " & reasons(i))
                    next
                else
                    for i = 0 to ubound(reasons) - 1
                        wise_util.trace("Safety: unsafereason: " & reasons(i))
                    next
                end if
            end if
        elseif (response = "true") Then
            'wise_util.trace "[I] remote wise-issafe response: " & response & " => wiseissafe = " & wiseissafe
            WiseIsSafe = True
        end if
        
        lastIsSafeQueryTime = Now

        wise_tele.check_limits

    end function


    function unsafereasons2array(str)
        dim ret, items, i

        'wise_util.trace "unsafereasons2array: str '" & str & "'"
        str = replace(str, chr(34), "")
        str = replace(str, "[", "")
        str = replace(str, "]", "")
        'wise_util.trace "unsafereasons2array: str '" & str & "'"
        if instr(str, "HumanIntervention") Then
            items = split(str, ";")
        else
            items = split(str, ",")
        end if

        if ubound(items) = 0 then
            redim ret(1)
            ret(0) = str
        else
            redim ret(ubound(items))
            for i = 0 to ubound(items)
                ret(i) = items(i)
            next
        end if

        unsafereasons2array = ret
        'for i = 0 to ubound(ret) - 1
            'wise_util.trace "unsafereasons2array(" & i & ") '" & ret(i) & "'"
        'next
    end function


]]>
		</script>
	</component>
</package>
