<?xml version="1.0" ?>
<package>
	<comment>
<![CDATA[
'tabs=4
-----------------------------------------------------------------------------------------

Wise Global Weather Server for ACP
==================================================

Script:         WiseWeather.wsc
Author:         Arie Blumenzweig <theblumz@gmail.com>
Version:        1.0
Requires:       ACP 8.0 or later
                Windows Script 5.6 or later (installed by ACP setup)

Description:    This ACP Weather Server queries the central SafeToOperate
		        ASCOM SafetyMonitor served by the ASCOM Remote Server (Alpaca)
				running on the site's central machine (132.6.65.9).

				It gets a boolean reflecting whether it is now safe to operate and
				returns it as its get_Safe() value.

				This setup allows centralized safety decisions to be used by all the 
				observatories at the Wise campus.
                
Environment:    This is a Windows Script Component. Once registered (with regsvr32) it
                provides ACP and its scripts with Weather information. This component
                is responsible for providing the interface with a weather sensor. You
                May use the ASCOM Serial device to communicate via RS-232 or if the 
                weather sensor has an ActiveX/Scriptable interface, you may create an
                instance of the object, and call directly into that interface.
                
Edit History:
    09-Feb-2020   Initial Edit including new GUID!
-----------------------------------------------------------------------------------------
]]>
	</comment>
	<component id="ACP.WiseWeather">
		<?component error="true" debug="false" ?>
		<registration progid="ACP.WiseWeather" classid="{3D129BC4-3066-412B-A768-630A82B1646F}" description="Queries Wise's central SafeToOperate SafetyMonitor" remotable="no" version="1.0">
		</registration>
		<public>
			<method name="SetupDialog">
			</method>
			<property name="Connected">
				<get/>
				<put/>
			</property>
			<property name="AmbientTemperature">
				<get/>
			</property>
			<property name="BarometricPressure">
				<get/>
			</property>
			<property name="Clouds">
				<get/>
			</property>
			<property name="DewPoint">
				<get/>
			</property>
			<property name="Name">
				<get/>
			</property>
			<property name="Precipitation">
				<get/>
			</property>
			<property name="RelativeHumidity">
				<get/>
			</property>
			<property name="Safe">
				<get/>
			</property>
			<property name="SkyTemperature">
				<get/>
			</property>
			<property name="WindDirection">
				<get/>
			</property>
			<property name="WindVelocity">
				<get/>
			</property>
		</public>
		<object id="FSO" progid="Scripting.FileSystemObject" events="false" reference="false"/>
		<object id="Util" progid="ACP.Util" events="false" reference="true"/>
		<script id="WiseWeather" language="VBScript">
<![CDATA[
Option Explicit

Const SVR_VERSION = "1.0.0"
Const PROG = "WiseWeather"
Const ERR_SOURCE = "ACP.WiseWeather"
Const PRP = "Property "				' Common bits for error messages
Const NTI = " is not implemented"
'
' Manifest constants from Clarity II
'
Const cloudUnknown = 0
Const cloudClear = 1
Const cloudCloudy = 2
Const cloudVeryCloudy = 3
Const cloudWet = 4      ' Boltwood I only
Const windUnknown = 0
Const windCalm = 1
Const windWindy = 2
Const windVeryWindy = 3
Const rainUnknown = 0
Const rainDry = 1
Const rainWet = 2      'sensor has water on it
Const rainRain = 3     'falling rain drops detected
Const dayUnknown = 0
Const dayDark = 1
Const dayLight = 2
Const dayVeryLight = 3
Const windUnitsKMH = 0
Const windUnitsMPH = 1
Const windUnitsMS = 2
Const skyUnknown = 0
Const skyClear = 1
Const skyCloudy = 2
Const skyVeryCloudy = 3
Const skyWet = 4
'
' Turn this on to have detailed tracing to a log file
'
Const DIAG_TRACE = True
'
' Polling interval, do not read file more often than this
'
Const POLL_INT = #00:01:00#

'
' Code outside of any Function or Sub is executed when this object is created.
'
Dim connected
Dim lastIsSafeQueryTime
Dim lastSafe
Dim localStationIsReliable	' Should be set to True if the Boltwood station provides reliable data, to False otherwise
Dim ClarityII
Dim lastUnsafeReasons
Dim hostname
Dim parking
Dim Telescope, telescopeParkHA, telescopeParkDec, telescopeAltLimit, telescopeWasConnected

dim dli : set dli = createobject("Wise.DliPowerSwitch")

dim wscript : set wscript = createobject("WScript.Shell")

Const digitalLoggersAddress = "132.66.65.13"
Dim digitalLoggersHeader
Dim digitalLoggersUrl
Dim ie
Set ie = Nothing

dim wutil : set wutil = createobject("Wise.Util")
wutil.set_prog_name "WiseWeather"

dim whttp  : set whttp  = createobject("Wise.Http")
dim wascom : set wascom = createobject("Wise.Ascom")

lastIsSafeQueryTime = CDate(Now - POLL_INT)
lastSafe = True
lastUnsafeReasons = ""
connected = False
localStationIsReliable = False
if IsEmpty(ClarityII) then
    set ClarityII = Nothing
end if

digitalLoggersUrl = "http://" & digitalLoggersAddress & "/index.htm"
digitalLoggersHeader = "Authorization: Basic " & whttp.Base64Encode("mizpe" & ":" & "ne'Gev")

If Util.Profile.GetValue("WiseWeather", "LocalStationIsReliable", "False")  = "True" Then
    localStationIsReliable = True
Else
	localStationIsReliable = False
End If

telescopeParkHA = Util.Profile.GetValue("WiseWeather", "ParkHA", "0")
telescopeParkDec = Util.Profile.GetValue("WiseWeather", "ParkDec", "0")
telescopeAltLimit = Util.Profile.GetValue("WiseWeather", "AltLimit", "15")

hostname = wutil.get_hostname()    ' C28-pc, dome-pc, wo-neo

If localStationIsReliable and ClarityII is Nothing Then
    Set ClarityII = CreateObject("ClarityII.CloudSensorII")
End If

'------------------------------------------------------------------------------
' Method SetupDialog()
'
' Parameters:   (none)
' Returns:      (nothing)
'
' Invokes the weather access setup dialog. I put in a file selection dialog,
' courtesy of ACP's Util object which you have use of automatically here.
'------------------------------------------------------------------------------
Sub SetupDialog()
	Dim response

	response = InputBox("The Wise server's IP address", "Server address", wascom.Server)
	if not isempty(response) then
		wascom.Server = response
	End If

	response = InputBox("The Wise server's IP port", "Server port", wascom.Port)
	if not isempty(response) then
		wascom.Port = response
	End If	

	response = MsgBox("Is the local weather station reliable?", vbYesNo)
	if response = vbYes Then
		localStationIsReliable = True
	Else
		localStationIsReliable = False
	End If
	Util.Profile.WriteValue "WiseWeather", localStationIsReliable, "LocalStationIsReliable"

    response = InputBox("Telescope altitude limit", "Alt limit (degrees):", telescopeAltLimit)
    If response <> "" Then
        telescopeAltLimit = response
    End If
	Util.Profile.WriteValue "WiseWeather", telescopeAltLimit, "AltLimit"

    response = InputBox("Telescope parking HourAngle", "HourAngle (hours):", telescopeParkHA)
    If response <> "" Then
        telescopeParkHA = response
    End If

    response = InputBox("Telescope parking Declination", "Declination (degrees):", telescopeParkDec)
    If response <> "" Then
        telescopeParkDec = response
    End If
	Util.Profile.WriteValue "WiseWeather", telescopeParkDec, "ParkDec"

End Sub

Function IsSuccess(s)
    IsSuccess = Left(s, 6) <> "error:"
End Function

'------------------------------------------------------------------------------
' Property Connected (R/W, REQUIRED)
'
' True means weather sensor is connected and operating (Boolean). 
' Set True to connect.
'------------------------------------------------------------------------------
' dim Connected									            ' PrimalScript UI target (typ.)
Function get_Connected()
	get_Connected = connected
End Function

Function put_Connected(newValue)
    connected = newValue

    If newValue Then
        wutil.trace "Connected (hostname: " & hostname & ", localStationIsReliable: " & localStationIsReliable & ", useLocalStation: " & useLocalStation & ")"
    Else
        wutil.trace "Disconnected"
    End If
End Function

Function useLocalStation() 
    useLocalStation = localStationIsReliable and not ClarityII Is Nothing
End Function

'------------------------------------------------------------------------------
' Property AmbientTemperature (R/O, OPTIONAL)
'
' The ambient (outside) air temperature (Single, deg.C)
'------------------------------------------------------------------------------
' Dim AmbientTemperature
Function get_AmbientTemperature()
    Dim response

    response = wascom.get_url("observingconditions/0/temperature")
	If IsSuccess(response) Then
        get_AmbientTemperature = response
    ElseIf useLocalStation Then
		get_AmbientTemperature = ClarityII.AmbientT
	End If
    wutil.trace "get_AmbientTemperature => " & get_AmbientTemperature
    'get_BarometricPressure
    'get_Clouds
    'get_DewPoint
    'get_Precipitation
    'get_RelativeHumidity
    'get_SkyTemperature
    'get_WindDirection
    'get_WindVelocity
End Function

'------------------------------------------------------------------------------
' Property BarometricPressure (R/O, OPTIONAL)
'
' The barometric pressure (Single, millibars)
' NOTE: This must be in millibars, per international aviation weather reporting
'       standards.
'------------------------------------------------------------------------------
' Dim BarometricPressure
Function get_BarometricPressure()
    Dim response

    response = wascom.get_url("observingconditions/0/pressure")
	If IsSuccess(response) Then
		get_BarometricPressure = response
	End If
    wutil.trace "get_BarometricPressure => " & get_BarometricPressure
End Function

'------------------------------------------------------------------------------
' Property Clouds (R/O, OPTIONAL)
'
' Cloud coverage (Single, fractional 0-1)
'------------------------------------------------------------------------------
' Dim Clouds
Function get_Clouds()
    Dim response

    response =  wascom.get_url("observingconditions/0/cloudcover")
	If IsSuccess(response)  Then
		get_Clouds = response
	ElseIf useLocalStation Then
        Select Case ClarityII.CloudCondition
            Case cloudClear
                get_Clouds = 0.0
            Case cloudClear
                get_Clouds = 0.5
            Case cloudVeryCloudy
                get_Clouds = 0.9
            Case cloudUnknown
                get_Clouds = 0.0
        End Select
	End If
    wutil.trace "get_Clouds => " & get_Clouds
End Function

'------------------------------------------------------------------------------
' Property DewPoint (R/O, OPTIONAL)
'
' The dew point temperature (Single, deg C)
'------------------------------------------------------------------------------
' Dim DewPoint
Function get_DewPoint()
    Dim response

    response = wascom.get_url("observingconditions/0/dewpoint")
    If IsSuccess(response) Then
		get_DewPoint = response
	ElseIf useLocalStation Then
		get_DewPoint = ClarityII.DewPointT
	End If
    wutil.trace "get_DewPoint => " & get_DewPoint
End Function

'------------------------------------------------------------------------------
' Property InsideTemperature (R/O, OPTIONAL)
'
' The temperature inside the observatory (Single, deg C)
'------------------------------------------------------------------------------
' Dim InsideTemperature
Function get_InsideTemperature()
	Err.Raise &H80040400, ERR_SOURCE, PRP & "Get InsideTemperature" & NTI
End Function

'------------------------------------------------------------------------------
' Property Name (R/O, OPTIONAL)
'
' The display name of the weather system (String)
'------------------------------------------------------------------------------
' dim Name
Function get_Name()
    get_Name = PROG
End Function

'------------------------------------------------------------------------------
' Property Precipitation (R/O, OPTIONAL)
'
' True if precipitation is present (Boolean)
'------------------------------------------------------------------------------
' Dim Precipitation
Function get_Precipitation()
    Dim response

    response = wascom.get_url("observingconditions/0/rainrate")
	If IsSuccess(response) Then
		get_Precipitation = response
	ElseIf useLocalStation Then
		get_Precipitation = (ClarityII.RainCondition = rainRain)
	End If
    wutil.trace "get_Precipitation => " & get_Precipitation
End Function

'------------------------------------------------------------------------------
' Property RelativeHumidity (R/O, OPTIONAL)
'
' The relative humidity (Single, fractional 0-1)
'------------------------------------------------------------------------------
' Dim RelativeHumidity
Function get_RelativeHumidity()
    Dim response

    response = wascom.get_url("observingconditions/0/humidity")
	If IsSuccess(response) Then
		get_RelativeHumidity = response
	ElseIf useLocalStation Then
		get_RelativeHumidity = ClarityII.HumidityPercent
	End If
    wutil.trace "get_RelativeHumidity => " & get_RelativeHumidity
End Function

'------------------------------------------------------------------------------
' Property Safe (R/O, REQUIRED)
'
' Return True when weather is safe, False when not. Returning False will
' stop any ACP script in progress and cause alarm and shutdown processes
' to be initiated.
'------------------------------------------------------------------------------
' dim Safe
Function get_Safe()
	get_Safe = WiseIsSafe

	If Not get_Safe And lastSafe Then                ' If this is a change from safe to unsafe
		Util.Console.PrintLine("Safety: Wise became unsafe to operate!")
	ElseIf get_safe and not lastSafe Then
		Util.Console.PrintLine("Safety: Wise became safe to operate!")
	End If
    
	lastSafe = get_Safe
	
End Function

'------------------------------------------------------------------------------
' Property SkyTemperature (R/O, OPTIONAL)
'
' The sky temperature (Single, deg C)
'------------------------------------------------------------------------------
' Dim SkyTemperature
Function get_SkyTemperature()
    Dim response

    response = wascom.get_url("observingconditions/0/skytemperature")
	If IsSuccess(response)  Then
		get_SkyTemperature = response
	ElseIf useLocalStation Then
		get_SkyTemperature = ClarityII.RelSkyT
	End If
    wutil.trace "get_SkyTemperature => " & get_SkyTemperature
End Function

'------------------------------------------------------------------------------
' Property WindDirection (R/O, OPTIONAL)
'
' The azimuth FROM which the wind is blowing (Single, deg. magnetic)
' NOTE: This must be in degrees MAGNETIC, per international aviation weather 
'       reporting standards.
'------------------------------------------------------------------------------
' Dim WindDirection
Function get_WindDirection()
    Dim response

    response = wascom.get_url("observingconditions/0/winddirection")
	If IsSuccess(response) Then
		get_WindDirection = response
	End If
    wutil.trace "get_WindDirection => " & get_WindDirection
End Function

Function KMHToKnots(kmh)
    KMHToKnots = kmh / 1.852
End Function

Function MPHToKnots(mph)
    MPHToKnots = mph / 1.151
End Function

Function MSToKnots(ms)
    MSToKnots = ms * 1.944
End Function

'------------------------------------------------------------------------------
' Property WindVelocity (R/O, OPTIONAL)
'
' The wind velocity (Single, knots)
'------------------------------------------------------------------------------
' Dim WindVelocity
Function get_WindVelocity()
    Dim response

    response = wascom.get_url("observingconditions/0/windspeed")
	If IsSuccess(response) Then
		get_WindVelocity = MSToKnots(response)
	ElseIf useLocalStation Then
        Select Case ClarityII.WindUnits
            Case windUnitsKMH
                get_WindVelocity = KMHToKnots(ClarityII.Wind)
            Case windUnitsMPH
                get_WindVelocity = MPHToKnots(ClarityII.Wind)
            Case windUnitsMS
                get_WindVelocity = MSToKnots(ClarityII.Wind)
        End Select

        get_WindVelocity = NormalizedClarityIIWind(ClarityII.Wind)
        wutil.trace "get_WindVelocity => " & get_WindVelocity & " Clarity.Wind: " & ClarityII.Wind & " Clarity.WindUnits: " & ClarityII.WindUnits
	End If
End Function

Function NormalizedClarityIIWind(value)
    Select Case hostname
        Case "c28-pc"
            NormalizedClarityIIWind = value '* 0.80
        Case "wo-neo"
            NormalizedClarityIIWind = value '* 0.70
    End Select
End Function

Function WiseIsSafe()
	Dim response, seconds, i, items
			
	seconds = DateDiff("s", lastIsSafeQueryTime, Now)
	If (seconds < 60) Then
		WiseIsSafe = lastSafe
		Exit Function
	End If

    response = wascom.put_url("safetymonitor/0/action", "Action=wise-issafe&Parameters=")

	If Not IsSuccess(response) Then
		If useLocalStation Then
            WiseIsSafe = _
                ClarityII.HumidityPercent <= 85.0 And _
                NormalizedClarityIIWind(ClarityII.Wind) <= 40.0 And _
                ClarityII.SkyCond = skyClear And _
                ClarityII.SecondsSinceGoodData < 60
		Else
			WiseIsSafe = False
		End If
	ElseIf (response = "False") Then
		WiseIsSafe = False
		response = wascom.put_url("safetymonitor/0/action", "Action=wise-unsafereasons&Parameters=")			
        If response <> lastUnsafeReasons Then
            lastUnsafeReasons = response
            If (InStr(response, "HumanIntervention")) Then
                response = replace(response, chr(34), "")
                response = replace(response, "[", "")
                response = replace(response, "]", "")
                items = Split(response, ";")
                For i=1 to UBound(items)
                    Util.Console.PrintLine("Safety: HumanIntervention: " & items(i))
                Next
            Else
                Util.Console.PrintLine("Safety: Wise is NOT safe: " & response)
            End If
        End If
	ElseIf (response = "True") Then
		WiseIsSafe = True
	End If
	
	lastIsSafeQueryTime = Now

    ParkIfUnderAltLimit
End Function

'--------------------------------------------------------------------
' ACP calls IsSafe every 10 seconds,
'   IsSafe calls WiseIsSafe,
'       WiseIsSafe:
'           Checks safety and returns the same value for one minute
'           Once a minute it calls ParkIfUnderAltLimit
'
' If the telescope's altitude is less than the telescopeAltLimit
'  it is sent (asynchronously) to the pre-defined parking coordinates
'--------------------------------------------------------------------
Sub ParkIfUnderAltLimit()
    Dim response

    if hostname <> "c28-pc" then _
        exit sub

    if not dli.has_power("Telescope") then
        wutil.trace "ParkIfUnderAltLimit: The telescope is powered OFF"
        exit sub
    end if

    If Not Util.TelescopeConnected Then
        Util.TelescopeConnected = True
        Util.WaitForMilliseconds(1000)
        If Not Util.TelescopeConnected Then
            wutil.trace "ParkIfUnderAltLimit: Cannot set Util.TelescopeConnected to True"
            Exit Sub
        End If
        telescopeWasConnected = True
    End If

    If parking Then
        If Not Util.ScriptTelescope.Slewing Then
            ' We were parking and the telescope stopped Slewing => The slew ended
            wutil.trace "ParkIfUnderAltLimit: Telescope is parked at (" & Util.ScriptTelescope.HourAngle & ", " & Util.ScriptTelescope.Declination & ")"
            parking = False
        End If

        if telescopeWasConnected Then Util.TelescopeConnected = False
        Exit Sub     'guard against being called while the telescope is still parking
    End If

    If Util.ScriptTelescope.Altitude >= telescopeAltLimit Then
        wutil.trace "ParkIfUnderAltLimit: Telescope is at altitude " & Util.ScriptTelescope.Altitude & " (above " & telescopeAltLimit & ")"
        If telescopeWasConnected Then Util.TelescopeConnected = False
        Exit Sub     ' Telescope is above AltLimit
    End If

    ' We're commited to start parking the telescope
    Dim millis
    millis = 1000
    wutil.trace "ParkIfUnderAltLimit: Sending telescope to parking position (" & telescopeParkHA & ", " & telescopeParkDec & ")"
    If Not Util.TelescopeConnected Then
        Util.TelescopeConnected = True
        telescopeWasConnected = True
    End If

    ' A synchronous slew would be risky, ACP calls us every minute and the parking may take longer
    Util.ScriptTelescope.SlewToCoordinatesAsync Util.NowLST() - telescopeParkHA, telescopeParkDec 
    While Not Util.ScriptTelescope.Slewing
        wutil.trace "ParkIfUnderAltLimit: Waiting " & millis & " millis for the telescope to start slewing ..."
        Sleep millis
    Wend
End sub

]]>
		</script>
	</component>
</package>
