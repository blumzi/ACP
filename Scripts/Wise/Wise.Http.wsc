<?xml version="1.0" ?>
<package>
	<comment>
    <![CDATA[
    'vim:se sts=4 sw=4 ts=4 expandtab:
    'tabs=4
    -----------------------------------------------------------------------------------------
    Wise HTTP Utilities
    ==================================================

    Script:         Wise.Http.wsc
    Author:         Arie Blumenzweig <theblumz@gmail.com>
    Version:        1.0
    Requires:       Windows Script 5.6 or later (installed by ACP setup)

    Description:    This is a bunch of Wise HTTP utilities useful for ACP scripts
                    
    Environment:    This is a Windows Script Component. Once registered (with regsvr32) it
                    provides ACP and its scripts with Weather information. This component
                    is responsible for providing the interface with a weather sensor. You
                    May use the ASCOM Serial device to communicate via RS-232 or if the 
                    weather sensor has an ActiveX/Scriptable interface, you may create an
                    instance of the object, and call directly into that interface.
                    
    Edit History:
        03-Jun-2020   Initial Edit
    -----------------------------------------------------------------------------------------
    ]]>
	</comment>
	<component>
		<?component error="false" debug="false" ?>
		<registration
            progid="Wise.Http" 
            classid="{40c58c93-6706-41b9-bdf4-f123cdd64cf9}" 
            description="Wise http methods" 
            remotable="no" 
            version="1.0">
		</registration>
		<public>
			<method name="request">
                <parameter name="verb"/>
                <parameter name="url"/>
                <parameter name="user"/>
                <parameter name="password"/>
			</method>
			<method name="get_url">
                <parameter name="url"/>
                <parameter name="user"/>
                <parameter name="password"/>
			</method>
			<method name="put_url">
                <parameter name="url"/>
                <parameter name="data"/>
                <parameter name="user"/>
                <parameter name="password"/>
			</method>
			<method name="GetJSONValue">
                <parameter name="json"/>
			</method>
			<method name="Base64Encode">
                <parameter name="text"/>
			</method>
		</public>

		<script language="VBScript">

    <![CDATA[

    dim wise_util : set wise_util = createobject("Wise.Util")

    function get_url(url, user, password)
        get_url = request("GET", url, Null, user, password)
    end function

    function put_url(url, data, user, password)
        put_url = request("PUT", url, data, user, password)
    end function

    function request(verb, url, data, user, password)
        dim server, response, err_no, err_desc
        const maxSeconds = 5
        
        set server = createobject("MSXML2.ServerXMLHTTP")
        server.setTimeouts 1000, 1000, 2000, 2000

        on error resume next
        server.open verb, url, false, user, password
        err_no = err.number
        err_desc = err.description
        on error goto 0

        if err_no = 0 Then
           server.setRequestHeader "Content-Type", "text/html"

           on error resume next
           select case verb
            case "GET"
                server.Send
            case "PUT"
                server.setRequestHeader "Content-Length", Len(data)
                server.Send(data)
           end select
           err_no = err.number
           err_desc = err.description
           on error goto 0

           dim msg
           msg = "Request: " & verb
           if not isempty(data) then
               msg = msg & " " & data
           end if
           msg = msg & " => "

           if err_no <> 0 then
                set server = nothing
                wise_util.trace msg & " error:" & err_desc
                exit function
           end if

           dim starttime, elapsed
           starttime = timer
           elapsed = 0
           do while server.readystate <> 4 and elapsed <= maxseconds
                wise_util.trace "Sleeping 1 second ..."
                wise_util.sleep 1
                elapsed = round(timer - starttime)
           loop
           if elapsed > maxseconds then
                set server = nothing
                request = "error:timedout after " & elapsed & " seconds (readystate: " & server.readystate & ")"
                wise_util.trace msg & request
                exit function
           end if

           if instr(server.responsetext, "ClientTransactionID") then
                request = getJSONvalue(server.responsetext)
           else
                request = server.responsetext
           end if
           'wise_util.trace msg & request ' Success

        end if

        set server = nothing
        
    end function

    function getJSONvalue(json)
        with createobject("ScriptControl")
            .Language = "JScript"
            with .eval("(" + json + ")")
                getJSONvalue = .Value
            end with
        end with
    end function

    function Base64Encode(sText)
        Dim oXML, oNode

        set oXML = createobject("Msxml2.DOMDocument.3.0")
        set oNode = oXML.CreateElement("base64")
        oNode.dataType = "bin.base64"
        oNode.nodeTypedValue = Stream_StringToBinary(sText)
        Base64Encode = oNode.text
        set oNode = Nothing
        set oXML = Nothing
    end function

    'Stream_StringToBinary function
    '2003 Antonin Foller, http://www.motobit.com
    'Text - string parameter To convert To binary data
    function Stream_StringToBinary(Text)
      const adTypeText = 2
      const adTypeBinary = 1

      'Create Stream object
      Dim BinaryStream 'As New Stream
      set BinaryStream = createobject("ADODB.Stream")

      'Specify stream type - we want To save text/string data.
      BinaryStream.Type = adTypeText

      'Specify charset For the source text (unicode) data.
      BinaryStream.Charset = "us-ascii"

      'Open the stream And write text/string data To the object
      BinaryStream.Open
      BinaryStream.WriteText Text

      'Change stream type To binary
      BinaryStream.Position = 0
      BinaryStream.Type = adTypeBinary

      'Ignore first two bytes - sign of
      BinaryStream.Position = 0

      'Open the stream And get binary data from the object
      Stream_StringToBinary = BinaryStream.Read

      set BinaryStream = Nothing
    end function
    ]]>
		</script>
	</component>
</package>
