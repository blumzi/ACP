<?xml version="1.0" ?>
<!-- vim:se expandtab sts=4 ts=4 sw=4 -->
<package>
    <comment>
    <![CDATA[
    'tabs=4
    -----------------------------------------------------------------------------------------
    Some Wise dome methods
    ==================================================

    Script:         Wise.Dome.wsc
    Author:         Arie Blumenzweig <theblumz@gmail.com>
    Version:        1.0
    Requires:       Windows Script 5.6 or later (installed by ACP setup)

    Description:    This is a bunch of Wise utilities useful for ACP scripts
                    
    Environment:    This is a Windows Script Component. Once registered (with regsvr32) it
                    provides ACP and its scripts with Weather information. This component
                    is responsible for providing the interface with a weather sensor. You
                    May use the ASCOM Serial device to communicate via RS-232 or if the 
                    weather sensor has an ActiveX/Scriptable interface, you may create an
                    instance of the object, and call directly into that interface.
                    
    Edit History:
        09-May-2020   Initial Edit
    -----------------------------------------------------------------------------------------
    ]]>
    </comment>
    <component>
        <?component error="true" debug="false" ?>
        <registration
            progid="Wise.Dome" 
            classid="{b5b700d0-4e53-4102-93f5-6e5baaae2218}" 
            description="Wise dome methods" 
            remotable="no" 
            version="1.0">
        </registration>
        <public>
            <method name="startup"/>
            <method name="shutdown"/>
            <property name="parking_az">
                <get />
                <put />
            </property>
        </public>

        <script language="VBScript">

    <![CDATA[

    dim wise_util   : set wise_util = createobject("Wise.Util")
    dim wise_dli    : wise_dli = createobject("Wise.Dli")
    dim acp_util    : set acp_util = createobject("ACP.Util")
    dim obs         : obs = wise_util.observatory
    dim label       : label = wise_util.mklabel("Dome")
    dim parking_az, acp_dome, parking_tolerance, dome

    select case obs
        case "c28"
            parking_az = 233
            parking_tolerance = 0.5
            set dome = createobject("ASCOM.ScopeDomeUSBDome.DomeLS")
        case "c18"
            parking_az = 82
            parking_tolerance = 0.5
            set dome = createobject("???")
        case "wise40"
            parking_az = 90
            parking_tolerance = 2
            set dome = createobject("ASCOM.Wise40.Dome")
    end select

    set acp_dome = createobject("ACP.Dome")

    ' ASCOM shutter states
    const shutterOpen = 0
    const shutterClosed = 1
    const shutterOpening = 2
    const shutterClosing = 3
    const shutterError = 4


    sub startup
        select case obs
            case "c28"
                c28_startup
            case "c18"
                c18_startup
            case "wise40"
                wise40_startup
        end select
    end sub

    sub c28_startup
        ' The C28 dome needs power cycling
        wise_dli.power_cycle("dome")

        if not acp_dome.connected then
            acp_dome.connected = true
            wise_util.sleep 2
        end if

        c28_ensure_shutter_link

    end sub

    '
    ' Shutdown
    '
    sub shutdown
            select case obs
            case "c28"
                c28_shutdown

            case "c18"
                c18_shutdown

            case "wise40"
                wise40_shutdown

            end select
    end sub

    sub c28_shutdown
        if not wise_dli.has_power("dome") then
            wise_util.info label & "Powering ON"
            wise_dli.power_on("dome")
            wise_util.sleep 5
        end if

        c28_ensure_shutter_link
        get_shutter_to(shutterClosed)
        wise_util.info label & "Powering OFF"
        wise_dli.power_off("dome")
    end sub

    sub c28_ensure_shutter_link
        dim link_strength : link_strength = dome.commandstring("Shutter_Link_Strength")

        if link_strength < 90 then
            wise_util.info label & "Shutter link is too low (" & link_strength & "%)"

            if abs(dome.azimuth - 233) < 5 then
                c28_slewtoazimuth(dome.azimuth + 10)
                c28_slewtoazimuth(233)
            end if
            
            link_strength = dome.commandstring("Shutter_Link_Strength")
            if link_strength < 90 then
                wise_util.info label & "Cycling power"
                dome = nothing
                wise_dli.power_cycle("dome")
                set dome = createobject("ASCOM.ScopeDomeUSBDome.DomeLS")
                wise_util.sleep 2
                link_strength = dome.commandstring("Shutter_Link_Strength")
                if link_strength < 90 then
                    wise_util.error label & "Cannot achieve good shutter link (now at " & link_strength & "%)"
                    exit sub
                end if
            end if
            wise_util.info label & "Shutter link at " & link_strength & "%"            
        end if
    end sub

    sub c28_slewtoazimuth(az)
        dim start_slew : start_slew = timer
        dim elapsed    : elapsed = 0
        const max_seconds = 60

        wise_util.info label & "Slewing to " & az & " degrees"
        dome.slewtoazimuth(az)
        while not dome.slewing
            wise_util.sleep 2
            elapsed = timer - start_slew
            if elapsed > max_seconds then
                wise_util.error label & "Did not start_slew slewing within " & elapsed & " seconds!"
                exit sub
            end if
        wend

        while dome.slewing
            wise_util.sleep 2
        wend

        wise_util.info label & "Arrived to " & dome.azimuth & " degrees"
    end sub

    ' Do whatever needed to get the shutter to the specified state
    sub get_shutter_to(target_state)
        const interval = 10
        const max_seconds = 60
        dim state, start, elapsed

        if dome.shutterstatus = target_state then
            wise_util.info label & "Shutter state: " & shutter_status_str(target_state)
            exit sub
        end if

        start = timer
        if target_state = shutterOpen then
            wise_util.info label & "Started opening the shutter"
            dome.openshutter
        elseif target_state = shutterClosed then
            wise_util.info label & "Started closing the shutter"
            dome.closeshutter
        end if

        while true
            wise_util.info label & " waiting " & interval & " seconds ..."
            wise_util.sleep interval

            state = dome.shutterstatus
            if state = target_state then
                wise_util.info label & "Shutter state: " & shutter_status_str(state)
                exit sub
            end if

            elapsed = timer - start_opening
            if elapsed > max_seconds then
                wise_fatal label & "Shutter did not reach the " & shutter_status_str(target_state) & " within " & elapsed & " seconds"
                exit sub
            end if
        wend
    end sub

    function shutter_status_str(status)
        select case status
            case shutterOpen
                shutter_status_str = "open"
            case shutterOpening
                shutter_status_str = "opening"
            case shutterClosed
                shutter_status_str = "closed"
            case shutterClosing
                shutter_status_str = "closing"
            case shutterError
                shutter_status_str = "error"
        end select
    end function

    function atpark
        if acp_dome.canpark and acp_dome.atpark then
            atpark = true
        elseif acp_dome.canfindhome then
            atpark = acp_dome.athome
        else
            dim az : az = acp_dome.azimuth

            atpark = abs(parking_az - az) <= parking_tolerance
        end if
    end function

    sub park
        if acp_dome.slewing then
            acp_dome.abortslew
            wise_util.sleep 5
        end if

        if not atpark then
            if acp_dome.canpark then
                acp_dome.park
            elseif acp_dome.canfindhome then
                acp_dome.findhome
            else
                acp_dome.slewtoaz parking_az
            end if

            wise_util.sleep 5   ' let it start slewing
            while acp_dome.slewing
                wise_util.info label & "dome is at " & int(acp_dome.azimuth) & " degrees ..."
                wise_util.sleep 2
            wend
        end if
        wise_util.info  label & "dome is parked at " & int(acp_dome.azimuth) & " degrees"
    end sub

    sub unpark
        if acp_dome.canpark and acp_dome.atpark then
            acp_dome.unpark
            wise_util.info label & "unparked"
        end if
    end sub

    function get_parking_az
        get_parking_az = parking_az
    end function

    sub put_parking_az(value)
        parking_az = value
    end sub

    ]]>
        </script>
    </component>
</package>
