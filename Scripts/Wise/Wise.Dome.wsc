<?xml version="1.0" ?>
<!-- vim:se expandtab sts=4 ts=4 sw=4 -->
<package>
    <comment>
    <![CDATA[
    'tabs=4
    -----------------------------------------------------------------------------------------
    Some Wise dome methods
    ==================================================

    Script:         Wise.Dome.wsc
    Author:         Arie Blumenzweig <theblumz@gmail.com>
    Version:        1.0
    Requires:       Windows Script 5.6 or later (installed by ACP setup)

    Description:    This is a bunch of Wise utilities useful for ACP scripts
                    
    Environment:    This is a Windows Script Component. Once registered (with regsvr32) it
                    provides ACP and its scripts with Weather information. This component
                    is responsible for providing the interface with a weather sensor. You
                    May use the ASCOM Serial device to communicate via RS-232 or if the 
                    weather sensor has an ActiveX/Scriptable interface, you may create an
                    instance of the object, and call directly into that interface.
                    
    Edit History:
        09-May-2020   Initial Edit
    -----------------------------------------------------------------------------------------
    ]]>
    </comment>
    <component>
        <?component error="true" debug="false" ?>
        <registration
            progid="Wise.Dome" 
            classid="{b5b700d0-4e53-4102-93f5-6e5baaae2218}" 
            description="Wise dome methods" 
            remotable="no" 
            version="1.0">
        </registration>
        <public>
            <method name="startup"/>
            <method name="shutdown"/>
            <method name="get_shutter_to">
                <parameter name="shutter_state"/>
            </method>
            <property name="parking_az">
                <get />
                <put />
            </property>
            <property name="shutterOpen">
                <get />
            </property>
            <property name="shutterOpening">
                <get />
            </property>
            <property name="shutterClosed">
                <get />
            </property>
            <property name="shutterClosing">
                <get />
            </property>
            <property name="shutterError">
                <get />
            </property>
        </public>

        <script language="VBScript">

    <![CDATA[

    dim wise_util   : set wise_util = createobject("Wise.Util")
	dim obs         : obs = wise_util.observatory
    dim wise_dli    : set wise_dli = createobject("Wise.Dli")
    dim acp_util    : set acp_util = createobject("ACP.Util")
    dim label       : label = wise_util.mklabel("Dome")
    dim parking_az, parking_tolerance, dome

	load_dome_settings	' sets parking_az

    select case obs
        case "c28"
            parking_tolerance = 0.5
            set dome = createobject("ASCOM.ScopeDomeUSBDome.DomeLS")
        case "c18"
            parking_tolerance = 0.5
            set dome = createobject("???")
        case "wise40"
            parking_tolerance = 2
            set dome = createobject("ASCOM.AlpacaDynamic1.Dome")
    end select

    ' ASCOM shutter states
    const const_shutterOpen = 0
    const const_shutterClosed = 1
    const const_shutterOpening = 2
    const const_shutterClosing = 3
    const const_shutterError = 4
            
    function get_shutterOpen
        get_shutterOpen = const_shutterOpen
    end function   
            
    function get_shutterClosed
        get_shutterClosed = const_shutterClosed
    end function   

    function get_shutterOpening
        get_shutterOpening = const_shutterOpening
    end function

    function get_shutterClosing
        get_shutterClosing = const_shutterClosing
    end function

    function get_shutterError
        get_shutterError = const_shutterError
    end function

	const seconds_to_start_moving = 60

	'---------------------
	' Generic dome section
	'---------------------
    sub startup
        select case obs
            case "c28"
                c28_startup
            case "c18"
                c18_startup
            case "wise40"
                wise40_startup
            case "h80"
                h80_startup
        end select
    end sub            

    sub shutdown
            select case obs
            case "c28"
                c28_shutdown
            case "c18"
                c18_shutdown
            case "wise40"
                wise40_shutdown
            case "h80"
                h80_shutdown
            end select
    end sub

    sub dome_info(msg)
        wise_util.info label & msg
    end sub

    sub dome_fatal(reason, msg)
        wise_util.fatal reason, label & msg
    end sub
            
    '
    ' Do whatever is needed to get the shutter to the specified state
    '
    sub get_shutter_to(target_state)

        if dome.shutterstatus = target_state then
            exit sub
        end if

        if target_state = shutterOpen then
            dome_info "started opening the shutter"
            dome.openshutter
        elseif target_state = shutterClosed then
            dome_info "started closing the shutter"
            dome.closeshutter
        else
            dome_info "get_shutter_to: Bad target state: " & target_state
            exit sub
        end if

		' 
		' The dome.openshutter and dome.closeshutter functions are BLOCKING
		' They will not return unless the shutter has reached its target state
		'

		dome_info "shutter is now " & shutter_state_to_str(dome.shutterstatus)

    end sub

    function shutter_state_to_str(status)
        select case status
            case const_shutterOpen
                shutter_state_to_str = "open"
            case const_shutterOpening
                shutter_state_to_str = "opening"
            case const_shutterClosed
                shutter_state_to_str = "closed"
            case const_shutterClosing
                shutter_state_to_str = "closing"
            case const_shutterError
                shutter_state_to_str = "error"
        end select
    end function

    function atpark
        if dome.canpark and dome.atpark then
            atpark = true
        elseif dome.canfindhome then
            atpark = dome.athome
        else
            dim az : az = dome.azimuth

            atpark = abs(parking_az - az) <= parking_tolerance
        end if
    end function

    sub park
        if dome.slewing then
            dome.abortslew
            wise_util.sleep 5
        end if

        if not atpark then
            if dome.canpark then
                dome.park
            elseif dome.canfindhome then
                dome.findhome
            else
                dome.slewtoaz parking_az
            end if

            wise_util.sleep 5   ' let it start slewing
            while dome.slewing
                dome_info "dome is at " & int(dome.azimuth) & " degrees ..."
                wise_util.sleep 2
            wend
        end if
        dome_info "dome is parked at " & int(dome.azimuth) & " degrees"
    end sub

    sub unpark
        if dome.canpark and dome.atpark then
            dome.unpark
            dome_info "unparked"
        end if
    end sub

    function get_parking_az
        get_parking_az = parking_az
    end function

    sub put_parking_az(value)
        parking_az = value
    end sub

    '
    ' Loads dome parameters from the WiseSettings.json file
    '
    sub load_dome_settings()
		dim jsonFile : jsonFile = wise_util.settings_file
        dim f, json
		dim fso : set fso = createobject("Scripting.FileSystemObject")

        err.Clear
        on error resume next
        set f = fso.OpenTextFile(jsonFile, 1)
        json = f.readall
        f.close
        
        if (err.number = 0) then
            with createobject("ScriptControl")
                .Language = "JScript"
                with .Eval("(" + json + ")")
                    parking_az = .Dome.HomePosition
                end with
            end with
        else
            err.Clear
            wise_util.fatal "load_dome_settings: Cannot open settings file: " & jsonFile
        end if
        f = nothing
		fso = nothing
        on error goto 0
    end sub 
    '----------------------------
	' End of generic dome section
	'----------------------------


	'---------------------
	' C28 specific section
	'---------------------
    sub c28_startup
		c28_get_ready_to_move_shutter const_shutterOpen
    end sub

	sub c28_get_ready_to_move_shutter(targetState)

		if wise_dli.has_power("dome") then
			wise_dli.power_off("dome")
			wise_util.sleep 5
		end if
		wise_dli.power_on("dome")

		dome_info "waiting 5 seconds for driver to settle ..."
		wise_util.sleep 5

		if dome.shutterstatus = targetState then
			dome_info "shutter already " & shutter_state_to_str(targetState)
			exit sub
		end if

		if not dome.athome then
			dome_info "finding home ..."
			dome.findhome
				
			c28_wait_for_slewing_to_start "find home for moving the shutter"
			c28_wait_for_slewing_to_end
		end if

		if dome.athome then
			dome_info "at home"
		else
			dome_fatal "dome findhome error", "did not reach home"
		end if

		dim link_strength : link_strength = CInt(dome.commandstring("Shutter_Link_Strength"))
        const minimal_link_strength = 75

		if link_strength < minimal_link_strength then
			dome_info "link strength " & link_strength & "% is below minimal " & minimal_link_strength & "% "

		    dim start_wait : start_wait = timer
		    dim elapsed : elapsed = timer - start_wait
		    const max_seconds = 300
		    while link_strength < minimal_link_strength and elapsed < max_seconds
			    wise_util.sleep 2
			    link_strength = CInt(dome.commandstring("Shutter_Link_Strength"))
			    elapsed = timer - start_wait
			    dome_info "link strength: " & link_strength & "% (still below minimal " & minimal_link_strength & "%)"
		    wend

		    if elapsed >= max_seconds and CInt(dome.commandstring("Shutter_Link_Strength")) < minimal_link_strength then
			    dome_fatal "shutter link strength", "could not reach the minimal link strength (" & minimal_link_strength & _
				    "%) within " & max_seconds & " seconds."
		    end if
		end if

		dome_info "link strength: " & link_strength & "%."

	end sub

	sub c28_wait_for_slewing_to_end
		wise_util.sleep 2
		while dome.slewing
			wise_util.sleep 5
		wend
	end sub

	sub c28_wait_for_slewing_to_start(reason)
		dim elapsed
		dim start_slew : start_slew = timer

		while not dome.slewing
			elapsed = timer - start_slew
			if elapsed > seconds_to_start_moving then
				dome_fatal reason, "did not start slewing within " & elapsed & " seconds!"
				exit sub
			end if
			wise_util.sleep 2
		wend
	end sub


    sub c28_shutdown
        dome_info "Telling ACP to Unslave the dome ..."
        acp_util.Dome.Slaved = false
		c28_get_ready_to_move_shutter shutterClosed
        get_shutter_to(shutterClosed)
    end sub


    sub c28_slewtoazimuth(az)
        dim start_slew : start_slew = timer
        dim elapsed    : elapsed = 0

        dome.slewtoazimuth(az)
        while not dome.slewing
            wise_util.sleep 2
            elapsed = timer - start_slew
            if elapsed > seconds_to_start_moving then
                dome_fatal "c28_slewtoazimuth", "did not start_slew slewing within " & seconds_to_start_moving & " seconds!"
                exit sub
            end if
        wend

        while dome.slewing
            wise_util.sleep 2
        wend

    end sub
    '----------------------------
	' End of c28 specific section
	'----------------------------



    '-------------------------
    ' Wise40 specific section
    '-------------------------
    sub wise40_startup
        if not dome.atpark then
            dome.park
            wise_util.sleep 5
            while not dome.atpark
                dome_info "at " & int(dome.azimuth) & " degrees ..."
                wise_util.sleep 5
            wend
        end if

        dome_info "at parking position"
    end sub

    sub wise40_shutdown
        if dome.atpark then
            dome_info "already parked"
        else
            dome_info "slewing to parking pozition"
            dome.park
            wise_util.sleep 5
            while not dome.atpark
                dome_info "at " & int(dome.azimuth) & " degrees ..."
                wise_util.sleep 5
            wend
            dome_info "at parking position " & int(dome.azimuth) & " degrees"
        end if

        if dome.shutterstatus = shutterClosed then
            dome_info "shutter already closed"
        else
            get_shutter_to shutterClosed
        end if
    end sub

    '-------------------------------
    ' End of Wise40 specific section
    '-------------------------------

    '-----------------------
    ' H80 specific section
    '-----------------------

    sub h80_startup
            dome_info "h80 startup: TBD"
    end sub

    sub h80_shutdown
            dome_info "h80 shutdown: TBD"
    end sub

    '-------------------------------
    ' End of H80 specific section
    '-------------------------------

    ]]>
        </script>
    </component>
</package>
