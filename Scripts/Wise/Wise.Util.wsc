<?xml version="1.0" ?>
<!-- vim:se expandtab ts=4 sw=4 -->
<package>
    <comment>
    <![CDATA[
    'tabs=4
    -----------------------------------------------------------------------------------------
    Some Wise Utility methods
    ==================================================

    Script:         Wise.Util.wsc
    Author:         Arie Blumenzweig <theblumz@gmail.com>
    Version:        1.0
    Requires:       Windows Script 5.6 or later (installed by ACP setup)

    Description:    This is a bunch of Wise utilities useful for ACP scripts
                    
    Environment:    This is a Windows Script Component. Once registered (with regsvr32) it
                    provides ACP and its scripts with Weather information. This component
                    is responsible for providing the interface with a weather sensor. You
                    May use the ASCOM Serial device to communicate via RS-232 or if the 
                    weather sensor has an ActiveX/Scriptable interface, you may create an
                    instance of the object, and call directly into that interface.
                    
    Edit History:
        09-May-2020   Initial Edit
    -----------------------------------------------------------------------------------------
    ]]>
    </comment>
    <component>
        <?component error="true" debug="false" ?>
        <registration
            progid="Wise.Util" 
            classid="{d778ffb5-8909-49d4-9782-890ee191799c}" 
            description="Wise utility methods" 
            remotable="no" 
            version="1.0">
        </registration>
        <public>
            <method name="info">
                <parameter name="Message"/>
            </method>
            <method name="debug">
                <parameter name="Message"/>
            </method>
            <method name="warning">
                <parameter name="Message"/>
            </method>
            <method name="fatal">
                <parameter name="Message"/>
            </method>
            <method name="trace">
                <parameter name="Message"/>
            </method>
            <property name="hostname">
                <get/>
            </property>
            <method name="sleep">
                <parameter name="Seconds"/>
            </method>
            <method name="connect_and_wait">
                <parameter name="Device"/>
                <parameter name="TimeoutSeconds"/>
            </method>
            <property name="observatory">
                <get/>
            </property>
            <property name="prog">
                <get/>
            </property>
            <method name="mklabel">
                <parameter name="label"/>
            </method>
            <method name="task_run">
                <parameter name="message"/>
                <parameter name="command"/>
            </method>
		<!--
            <method name="task_check_or_run">
                <parameter name="message"/>
                <parameter name="image_pattern"/>
                <parameter name="command"/>
            </method>
		-->
            <method name="task_kill">
                <parameter name="message"/>
                <parameter name="command"/>
            </method>
        </public>

        <script language="VBScript">

    <![CDATA[

    dim fso       : set fso = createobject("Scripting.FileSystemObject")
    dim acp_util  : set acp_util = createobject("ACP.Util")

    dim prog_file, prog_name

    if not isobject(acp_util.console.script) then
        prog_name = "WiseComponentsForACP"
        prog_path = "C:\Program Files (x86)\ACP Obs Control\WeatherComponents\" & prog_name & ".wsc"
    else
        if fso is nothing then
            prog_path = "unknown prog path"
            prog_name = "unknown"
        else
            set prog_file = fso.getfile(acp_util.console.script)
            prog_path = prog_file.path
            prog_name = prog_file.name
        end if
    end if

    '
    ' Outputs a message
    '
    sub say(msg)
        if isempty(msg) then
            exit sub
        end if

        if isobject(acp_util) then
            acp_util.Console.PrintLine msg
        end if
        trace msg
    end sub

    '
    ' Outputs a message and terminates the current script
    '
    sub fatal(source, msg)
        say "[F] " & msg
        err.clear
        err.raise vbObjectError + 1000, source, msg
    end sub

    '
    ' Outputs a warning message
    '
    sub warning(msg)
        say "[W] " & msg
    end sub

    '
    ' Outputs an information message
    '
    sub info(msg)
        say "[I] " & msg
    end sub

    '
    ' Outputs a debug message
    '
    sub debug(msg)
        say "DEBUG: " & msg
    end sub

    '
    ' Write a trace line to this script's trace file
    '
    sub trace(message)
        dim utc    : utc = acp_util.SysUTCDate
        dim stream : set stream = nothing
        dim today, file, folder, timestamp

        if datepart("h", utc) < 12 then
            utc = dateadd("d", -1, utc)
        end if
        today = acp_util.FormatVar(utc, "yyyy-mm-dd")

        folder = "c:\Wise\Logs\" &  today
        if not fso.FolderExists(folder) then
            fso.CreateFolder(folder)
        end if

        timestamp = acp_util.FormatVar(utc, "Hh:Nn:Ss") & " UT - "
        file = folder & "\" & prog_name & ".log"

        dim file_info
        dim new_file : new_file = false
        on error resume next
        set file_info = fso.getfile(file)
        if err.number <> 0 then
            new_file = true
        end if
        on error goto 0

        on error resume next    ' if file is locked just give up
        set stream = fso.OpenTextFile(file, 8, True) ' 8 = ForAppending
        if err.number <> 0 then
            exit sub
        end if
        on error goto 0

        if new_file then
            stream.writeline "==="
            stream.writeline "=== Script " & prog_path
            stream.writeline "==="
        end if

        if left(message, 1) <> "[" then
            message = "[I] " & message
        end if
        stream.WriteLine timestamp & message
        stream.close
    End Sub

    '
    ' Attempts to connect to a device within @max_seconds
    '
    sub connect_and_wait(device, max_seconds)
        dim start_time
        dim label : label = mklabel("Connect")

        if not isobject(device) then
            fatal label & "first argument must be an object"
        end if
        
        if device.connected then
            exit sub
        end if

        device.connected = true
        start_time = timer()
        do while not device.connected and (timer() - start_time) <= max_seconds
            sleep 1
        loop

        if not device.connected then
            fatal label & "'" & device.name & "' did not connect within " & max_seconds & " seconds"
        end if
    end sub

    '
    ' Take a nap
    '
    sub sleep(seconds)
        acp_util.WaitForMilliseconds(seconds * 1000)
    end sub

    '
    ' Get the curent machine's name
    '
    function get_hostname()
        dim shell : set shell = createobject("WScript.Shell")

        get_hostname = lcase(shell.ExpandEnvironmentStrings("%COMPUTERNAME%"))
        set shell = nothing
    end function

    function get_observatory
        dim hostname : hostname = get_hostname

        if hostname = "wo-neo" then
            get_observatory = "c18"
        elseif hostname = "c28-pc" then
            get_observatory = "c28"
        elseif hostname = "dome-pc" then
            get_observatory = "wise40"
        end if
    end function

    function get_prog
        get_prog = prog_name
    end function

    function mklabel(str)
        mklabel = str & ": "
    end function

    sub task_run(message, command)
        dim shell : set shell = createobject("WScript.Shell") 

        info message
        shell.run command
        set shell = Nothing
    end sub

'	sub task_check_or_run(message, image_pattern, command)
'		const WshSuccess = 1
'        dim shell : set shell = createobject("WScript.Shell") 
'
'		'shell.exec "qprocess.exe " & """" & image_pattern & """"
'		shell.exec "qprocess.exe focusmax.exe"
'		if shell.status <> WshSuccess then
'			info message
'			shell.run command
'		end if
'        set shell = Nothing
'	end sub

	sub task_kill(message, task_image_pattern)
		dim shell : set shell = createobject("WScript.Shell")

		info message
		shell.run "taskkill /f /im " & task_image_pattern
		set shell = nothing
	end sub

        ]]>
        </script>
    </component>
</package>
