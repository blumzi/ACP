<?xml version="1.0" ?>
<!-- vim:se expandtab ts=4 sw=4 -->
<package>
    <comment>
    <![CDATA[
    'tabs=4
    -----------------------------------------------------------------------------------------
    Some Wise Telescope methods
    ==================================================

    Script:         Wise.Tele.wsc
    Author:         Arie Blumenzweig <theblumz@gmail.com>
    Version:        1.0
    Requires:       Windows Script 5.6 or later (installed by ACP setup)

    Description:    This is a bunch of Wise utilities useful for ACP scripts
                    
    Environment:    This is a Windows Script Component. Once registered (with regsvr32) it
                    provides ACP and its scripts with Weather information. This component
                    is responsible for providing the interface with a weather sensor. You
                    May use the ASCOM Serial device to communicate via RS-232 or if the 
                    weather sensor has an ActiveX/Scriptable interface, you may create an
                    instance of the object, and call directly into that interface.
                    
    Edit History:
        07-Jul-2020   Initial Edit
    -----------------------------------------------------------------------------------------
    ]]>
    </comment>
    <component>
        <?component error="true" debug="true" ?>
        <registration
            progid="Wise.Tele" 
            classid="{e70b9b54-658e-45be-9962-984cc10ac7dc}" 
            description="Wise telescope methods" 
            remotable="no" 
            version="1.0">
        </registration>
        <public>
            <method name="startup"/>
            <method name="shutdown"/>
			<method name="slew_to_parking_position"/>
            <method name="c28_sync_to_absolute_encoders"/>
            <method name="check_limits"/>
        </public>

        <script language="VBScript">

    <![CDATA[

    dim wise_util  : set wise_util   = createobject("Wise.Util")
    dim wise_power : set wise_power  = createobject("Wise.Power")
    dim acp_util   : set acp_util    = createobject("ACP.Util")
    dim acp_tele   : set acp_tele    = createobject("ACP.Telescope")

    dim obs           : obs           = wise_util.observatory
    dim label         : label         = wise_util.mklabel("Telescope")
    dim was_connected : was_connected = false
    dim parking       : parking       = false
    dim monitoring    : monitoring    = false
    dim parking_ha, parking_dec, alt_limit

    if obs = "h80" then
        dim covers_movement_seconds = 8
        dim wise_covers : set wise_covers = createobject("ASCOM.AlpacaDynamic1.CoverCalibrator")
    end if


	'----------------
	' Generic section
	'----------------
    sub startup
		select case obs
			case "c28"
				c28_startup
			case "c18"
				c18_startup
			case "wise40"
				wise40_startup
			case "h80"
				h80_startup
		end select
    end sub


    sub shutdown
		select case obs
			case "c28"
				c28_shutdown
			case "wise40"
				wise40_shutdown
			case "h80"
				h80_shutdown
		end select 
	end sub


    sub tele_info(msg)
        wise_util.info label & msg
    end sub
            

	sub slew_to_parking_position
		select case obs
			case "c28"
				c28_slew_to_parking_position
		end select 
	end sub
            

    sub load_telescope_settings()
		dim jsonFile : jsonFile = wise_util.settings_file
        dim f, json
		dim fso : set fso = createobject("Scripting.FileSystemObject")

        err.Clear
        on error resume next
        set f = fso.OpenTextFile(jsonFile, 1)
        json = f.readall
        f.close
        
        if (err.number = 0) then
            with createobject("ScriptControl")
                .Language = "JScript"
                with .Eval("(" + json + ")")
					monitoring  = .Telescope.MonitoringEnabled
                    parking_ha  = .Telescope.HourAngle
                    parking_dec = .Telescope.Declination
                end with
            end with
        else
            err.Clear
            wise_util.fatal "load_telescope_settings: Cannot open settings file: " & jsonFile
        end if
        f = nothing
		fso = nothing
        on error goto 0
    end sub 
	'--------------------
	' End generic section
	'--------------------


	'---------------------
	' C28 specific section
	'---------------------
	sub c28_startup
        if not wise_power.has_power("Telescope") then
            wise_power.power_on("Telescope")
            wise_util.sleep 3
        end if

        if not acp_util.telescopeconnected then
			wise_util.connect_and_wait acp_tele, 30
        end if

		c28_sync_to_absolute_encoders
	end sub

	sub c28_slew_to_parking_position
		dim tstart, tmax

		parking_ra = acp_tele.siderealtime - parking_ha
		tele_info "slewing to parking position: " & acp_util.Hours_HMS(parking_ra) & ", " & acp_util.Degrees_DMS(parking_dec, ":", ":", "") & " ..."

        acp_tele.slewtocoordinatesasync parking_ra, parking_dec

		' wait for telescope to start slewing
		tmax = 60		' one minute
		tstart = timer
		while not acp_tele.slewing
			if timer - tstart > tmax then
				'wise_util.fatal "c28_slew_to_parking_position", label & "did not start slewing within " & tmax & " seconds"
				tele_info "did not start slewing within " & tmax & " seconds, aborting slew!"
				acp_tele.abortslew
				exit sub
			end if
			wise_util.sleep 2
		wend

		' wait for telescope to reach parking position
		tmax = 60 * 5	' five minutes
		tstart = timer
		while acp_tele.slewing
			if timer - tstart > tmax then
				'wise_util.fatal "c28_slew_to_parking_position", "did not reach parking within " & tmax & " seconds"
				tele_info "did not reach parking within " & tmax & " seconds, aborting slew!"
				acp_tele.abortslew
				wise_util.sleep 5
				exit sub
			end if
			wise_util.sleep 5
		wend

		tele_info "reached parking position"
	end sub


	sub c28_shutdown
		'
		' The FS2 cannot Park, so:
		'  - we need to send it to the parking coordinates
		'  - CanPark and CanFindHome are false
		'  - AtPark and AtHome are not relevant
		'

		load_telescope_settings

        if not wise_power.has_power("Telescope") then
            wise_power.power_on("Telescope")
            wise_util.sleep 3
        end if

		if not acp_tele.connected then
			acp_tele.connected = true
			tele_info "connected"
		end if

		if acp_tele.rightascension < 0.001 then
			c28_sync_to_absolute_encoders
		end if

		c28_slew_to_parking_position

		tele_info "disconnecting (dome as well)"
		acp_tele.connected = false

		wise_power.power_off("Telescope")

    end sub


    sub c28_sync_to_absolute_encoders

        if not obs = "c28" then
            exit sub
        end if

        dim reading, ha_reading, dec_reading, raw_reading
        dim dec_ticks, dec_asecs, dec_degrees
        dim ha_ticks, ha_asecs, ha_hours
        dim ra_asecs, ra_hours

        '
        ' The absolute encoders are read via an USB interface, using an external 
        '   utility (provided by the encoders' manufacturer) to read them
        '
        ' The output contains the declination and hour-angle readings, separated by a comma.
        ' The first reading is for declination (index = 0), the second for hour-angle (index = 1)
        ' Each encoder reading has the format: index:value:status
        '
        ' Where:
        '  - index:  0 for declination, 1 for hour-angle
        '  - value:  an integer
        '  - status: either NoError or something else
        '
        ' Example:    0:256:NoError,1:1024:NoError
        '
		dim fso  : set fso = createobject("Scripting.FileSystemObject")
		dim tmp  : tmp = fso.BuildPath(fso.GetSpecialFolder(2), fso.GetTempName())
        dim sh   : set sh = createobject ("WScript.Shell")

        sh.run "cmd /c C:\SEI\A2Read\A2Read\bin\Debug\A2Read.exe COM11 0 1 retry=15 > " & tmp, 0, True
        raw_reading = fso.OpenTextFile(tmp).ReadLine()
		fso.DeleteFile(tmp)

        set sh  = nothing
        set fso = nothing

        reading = split(raw_reading, ",")           ' split the output at the comma
        if ubound(reading) <> 1 then                ' we should get two parts
            wise_util.fatal label & "Bad reading from absolute encoders (reading: " & raw_reading & ")"
        end if

        dec_reading = split(reading(0), ":")        ' split the first reading (declination) at collons
        if ubound(dec_reading) <> 2 then            ' we should get three parts
            wise_util.fatal label & "Bad DEC absolute encoder reading: " & reading(0)
        end if

        ha_reading = split(reading(1), ":")         ' split the second reading (hour-angle) at collons
        if ubound(ha_reading) <> 2 then             ' we should get three parts
            wise_util.fatal label & "Bad RA absolute encoder reading: " & reading(1)
        end if

        if not ha_reading(2) = "NoError" or not dec_reading(2) = "NoError" then
            wise_util.fatal label & "Error(s) from absolute encoders: " & raw_reading
        end if

        dec_ticks = dec_reading(1)
        ha_ticks = ha_reading(1)

        '
        ' Convert encoder ticks to coordinates
        '
        const asec_per_tick = 175.04                     ' number of arc seconds per encoder tick
        dim zero_alt_asecs                               ' declination at 0 altitude South, negative value, in seconds
        dim asec_in_90_deg

        zero_alt_asecs = ( 30.596744 - 90 ) * 3600       ' declination at 0 altitude South, negative value, in seconds
        asec_in_90_deg = ( 90 * 3600 )

        dec_asecs = zero_alt_asecs  + ((dec_ticks + 51.01) * asec_per_tick)

        if dec_asecs >= asec_in_90_deg then
            dec_asecs = asec_in_90_deg - ( dec_asecs - asec_in_90_deg )
        end if
        dec_degrees = dec_asecs / 3600

        ha_asecs = (ha_ticks + 51.01) * asec_per_tick   ' arc-seconds above horizon
        ha_hours = (ha_asecs / 15) / 3600

        dim lst : lst = acp_util.nowlst
        if ha_ticks <= 1800 then
            ra_hours = (lst - ( 6 - ha_hours ))
            if ra_hours < 0 then
                ra_hours = ra_hours + 24
            end if
        else
            ra_hours = (lst + ( ha_hours - 6))
            if ra_hours >= 24 then
                ra_hours = ra_hours - 24
            end if
        end if

        ' Calcullated corrections, by Shay Kaspi
        dim ra_correction  :  ra_correction = acp_util.HMS_Hours("00:00:30")
        dim dec_correction : dec_correction = acp_util.DMS_Degrees("-02:30:00")

        ra_hours = ra_hours + ra_correction
        dec_degrees = dec_degrees + dec_correction

        '
        ' Sync the FS2 with the correct coordinates
        '
        dim msg
        acp_tele.SyncToCoordinates ra_hours, dec_degrees
        tele_info "synced to RA: " & acp_util.Hours_HMS(ra_hours) & ", DEC: " & acp_util.Degrees_DMS(dec_degrees, ":", ":", "")

    end sub

    '--------------------------------------------------------------------
    ' ACP calls IsSafe every 10 seconds,
    '   IsSafe calls WiseIsSafe,
    '       WiseIsSafe:
    '           Checks safety and returns the same value for one minute
    '           Once a minute it calls wise_tele.check_limits
    '
    ' if the telescope's altitude is less than the alt_limit
    '  it is sent (asynchronously) to the pre-defined parking coordinates
    '--------------------------------------------------------------------
    sub check_limits()
        dim response
        dim label : label = wise_util.mklabel("Limits")
        dim err_no, err_desc
        dim elapsed, max_seconds

        if not monitoring  then _
            exit sub

        if not wise_power.has_power("Telescope") then
            wise_util.trace "[I] " & label & "The telescope is powered OFF"
            exit sub
        end if

        dim msg : msg = "[I] " & label & "Telescope at "
        if not acp_util.telescopeconnected then
            acp_util.telescopeconnected = true
        end if

        if parking then
            if not acp_tele.slewing then
                ' We were parking and the telescope stopped Slewing => The slew ended
                wise_util.trace msg & "finished parking at (" & _
                    acp_util.hours_hms(acp_tele.rightascension) & ", " & _
                    acp_util.degrees_DMS(acp_tele.declination, ":", ":", "") & _
                    ")"
                parking = False
            end if
            exit sub     'guard against being called while the telescope is still parking
        end if

        if acp_tele.rightascension < 0.001 and acp_tele.declination < 0.01 then
            c28_sync_to_absolute_encoders
        end if

        msg  = msg & _
            "["  & acp_util.hours_hms(acp_tele.rightascension) & ", " & acp_util.degrees_DMS(acp_tele.declination, ":", ":", "") & "], " & _
            "(alt: " & acp_util.degrees_DM(acp_tele.altitude, ":", "") & ", " & "lim: " & acp_util.degrees_DM(alt_limit, ":", "") & ") "

        if acp_tele.altitude > alt_limit then
            wise_util.trace msg & ", above limit"
            exit sub
        end if

        wise_util.trace msg & ", under limit"

		c28_slew_to_parking_position

    end sub
    '----------------------------
    ' End of c28 specific section
    '----------------------------


    '------------------------
    ' Wise40 specific section
    '------------------------
    sub wise40_startup
        if not acp_util.telescopeconnected then
			wise_util.connect_and_wait acp_tele, 30
        end if

        if acp_tele.atpark then
            acp_tele.unpark
        else
            tele_info "slewing to the parking position"
            acp_tele.park
            acp_tele.unpark
        end if

        tele_info "at parking position"
    end sub

    sub wise40_shutdown
        if not acp_tele.atpark then
            tele_info "parking"
            acp_tele.park
        end if
        tele_info "at parking position"
        acp_tele.connected = false
        tele_info "disconnected"
    end sub
    '-------------------------------
    ' End of Wise40 specific section
    '-------------------------------

    '---------------------
    ' H80 specific section
    '---------------------
    sub h80_startup
        tele_info "Opening covers (waiting " & covers_movement_seconds & " sec) ..."
        wise_covers.OpenCover()
        wise_util.sleep covers_movement_seconds
        tele_info "Done opening covers ..."

        tele_info "H80 start fans (TBD)"
    end sub

    sub h80_shutdown
        tele_info "Closing covers (waiting " & covers_movement_seconds &  " sec) ..."
        wise_covers.CloseCover()
        wise_util.sleep covers_movement_seconds
        tele_info "Done closing covers ..."

        tele_info "H80 stop fans (TBD)"
    end sub
    '----------------------------
    ' End of H80 specific section
    '----------------------------

        ]]>
        </script>
    </component>
</package>
