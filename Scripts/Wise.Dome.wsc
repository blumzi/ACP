<?xml version="1.0" ?>
<!-- vim:se expandtab sts=4 ts=4 sw=4 -->
<package>
    <comment>
    <![CDATA[
    'tabs=4
    -----------------------------------------------------------------------------------------
    Some Wise dome methods
    ==================================================

    Script:         Wise.Dome.wsc
    Author:         Arie Blumenzweig <theblumz@gmail.com>
    Version:        1.0
    Requires:       Windows Script 5.6 or later (installed by ACP setup)

    Description:    This is a bunch of Wise utilities useful for ACP scripts
                    
    Environment:    This is a Windows Script Component. Once registered (with regsvr32) it
                    provides ACP and its scripts with Weather information. This component
                    is responsible for providing the interface with a weather sensor. You
                    May use the ASCOM Serial device to communicate via RS-232 or if the 
                    weather sensor has an ActiveX/Scriptable interface, you may create an
                    instance of the object, and call directly into that interface.
                    
    Edit History:
        09-May-2020   Initial Edit
    -----------------------------------------------------------------------------------------
    ]]>
    </comment>
    <component>
        <?component error="true" debug="false" ?>
        <registration
            progid="Wise.Dome" 
            classid="{b5b700d0-4e53-4102-93f5-6e5baaae2218}" 
            description="Wise dome methods" 
            remotable="no" 
            version="1.0">
        </registration>
        <public>
            <method name="startup"/>
            <method name="shutdown"/>
            <property name="parking_az">
                <get />
                <put />
            </property>
        </public>

        <script language="VBScript">

    <![CDATA[

    dim wise_util   : set wise_util = createobject("Wise.Util")
	dim obs         : obs = wise_util.observatory
    dim wise_dli    : set wise_dli = createobject("Wise.Dli")
    dim acp_util    : set acp_util = createobject("ACP.Util")
    dim label       : label = wise_util.mklabel("Dome")
    dim parking_az, parking_tolerance, dome

	load_dome_settings	' sets parking_az

    select case obs
        case "c28"
            parking_tolerance = 0.5
            set dome = createobject("ASCOM.ScopeDomeUSBDome.DomeLS")
        case "c18"
            parking_tolerance = 0.5
            set dome = createobject("???")
        case "wise40"
            parking_tolerance = 2
            set dome = createobject("ASCOM.Wise40.Dome")
    end select

    ' ASCOM shutter states
    const shutterOpen = 0
    const shutterClosed = 1
    const shutterOpening = 2
    const shutterClosing = 3
    const shutterError = 4

	const seconds_to_start_moving = 60

	'
	' Generic dome startup procedure
	'
    sub startup
        select case obs
            case "c28"
                c28_startup
            case "c18"
                c18_startup
            case "wise40"
                wise40_startup
        end select
    end sub

	'
	' C28 specific startup procedure
	'
    sub c28_startup
		c28_get_ready_to_move_shutter shutterOpen
    end sub

	sub c28_get_ready_to_move_shutter(targetState)
'       if not wise_dli.has_power("dome") then
'            wise_dli.power_on("dome")
'            wise_util.sleep 5
'		else
'			wise_util.info label & "has power"
'       end if

		if wise_dli.has_power("dome") then
			wise_dli.power_off("dome")
			wise_util.sleep 5
		end if
		wise_dli.power_on("dome")

		wise_util.info label & "waiting 5 seconds for driver to settle ..."
		wise_util.sleep 5

		if dome.shutterstatus = targetState then
			wise_util.info label & "shutter already " & shutter_state_to_str(targetState)
			exit sub
		end if

		if not dome.athome then
			wise_util.info label & "finding home ..."
			dome.findhome
				
			c28_wait_for_slewing_to_start "find home for moving the shutter"
			c28_wait_for_slewing_to_end
		end if

		if dome.athome then
			wise_util.info label & "at home"
		else
			wise_util.fatal "dome findhome error", label & "did not reach home"
		end if

		dim link_strength : link_strength = dome.commandstring("Shutter_Link_Strength") 
		wise_util.info label & "debug: link strength: " & link_strength & "%."
        const minimal_link_strength = 75
		if link_strength < minimal_link_strength then
			wise_util.fatal "Dome shutter link error", label & "link strength below " & minimal_link_strength & "%: " & link_strength & "%"
		else
			wise_util.info label & "link strength: " & link_strength & "%."
		end if

	end sub

	sub c28_wait_for_slewing_to_end
		wise_util.sleep 2
		while dome.slewing
			wise_util.sleep 5
		wend
	end sub

	sub c28_wait_for_slewing_to_start(reason)
		dim elapsed
		dim start_slew : start_slew = timer

		while not dome.slewing
			elapsed = timer - start_slew
			if elapsed > seconds_to_start_moving then
				wise_util.fatal reason, label & "did not start slewing within " & elapsed & " seconds!"
				exit sub
			end if
			wise_util.sleep 2
		wend
	end sub


    '
    ' Generic shutdown procedure
    '
    sub shutdown
            select case obs
            case "c28"
                c28_shutdown
            case "c18"
                c18_shutdown
            case "wise40"
                wise40_shutdown
            end select
    end sub

	'
	' C28-specific startup procedure
	'
    sub c28_shutdown
		c28_get_ready_to_move_shutter shutterClosed
        get_shutter_to(shutterClosed)
    end sub


    sub c28_slewtoazimuth(az)
        dim start_slew : start_slew = timer
        dim elapsed    : elapsed = 0

        dome.slewtoazimuth(az)
        while not dome.slewing
            wise_util.sleep 2
            elapsed = timer - start_slew
            if elapsed > seconds_to_start_moving then
                wise_util.fatal label & "did not start_slew slewing within " & seconds_to_start_moving & " seconds!"
                exit sub
            end if
        wend

        while dome.slewing
            wise_util.sleep 2
        wend

    end sub

    ' Do whatever needed to get the shutter to the specified state
    sub get_shutter_to(target_state)

        if dome.shutterstatus = target_state then
            exit sub
        end if

        if target_state = shutterOpen then
            wise_util.info label & "started opening the shutter"
            dome.openshutter
        elseif target_state = shutterClosed then
            wise_util.info label & "started closing the shutter"
            dome.closeshutter
        end if

		' 
		' The dome.openshutter and dome.closeshutter functions are BLOCKING
		' They will not return unless the shutter has reached its target state
		'

		wise_util.info label & "shutter is now " & shutter_state_to_str(dome.shutterstatus)

    end sub

    function shutter_state_to_str(status)
        select case status
            case shutterOpen
                shutter_state_to_str = "open"
            case shutterOpening
                shutter_state_to_str = "opening"
            case shutterClosed
                shutter_state_to_str = "closed"
            case shutterClosing
                shutter_state_to_str = "closing"
            case shutterError
                shutter_state_to_str = "error"
        end select
    end function

    function atpark
        if dome.canpark and dome.atpark then
            atpark = true
        elseif dome.canfindhome then
            atpark = dome.athome
        else
            dim az : az = dome.azimuth

            atpark = abs(parking_az - az) <= parking_tolerance
        end if
    end function

    sub park
        if dome.slewing then
            dome.abortslew
            wise_util.sleep 5
        end if

        if not atpark then
            if dome.canpark then
                dome.park
            elseif dome.canfindhome then
                dome.findhome
            else
                dome.slewtoaz parking_az
            end if

            wise_util.sleep 5   ' let it start slewing
            while dome.slewing
                wise_util.info label & "dome is at " & int(dome.azimuth) & " degrees ..."
                wise_util.sleep 2
            wend
        end if
        wise_util.info  label & "dome is parked at " & int(dome.azimuth) & " degrees"
    end sub

    sub unpark
        if dome.canpark and dome.atpark then
            dome.unpark
            wise_util.info label & "unparked"
        end if
    end sub

    function get_parking_az
        get_parking_az = parking_az
    end function

    sub put_parking_az(value)
        parking_az = value
    end sub

    sub load_dome_settings()
		dim jsonFile : jsonFile = wise_util.settings_file
        dim f, json
		dim fso : set fso = createobject("Scripting.FileSystemObject")

        err.Clear
        on error resume next
        set f = fso.OpenTextFile(jsonFile, 1)
        json = f.readall
        f.close
        
        if (err.number = 0) then
            with createobject("ScriptControl")
                .Language = "JScript"
                with .Eval("(" + json + ")")
                    parking_az = .Dome.HomePosition
                end with
            end with
        else
            err.Clear
            wise_util.fatal "load_dome_settings: Cannot open settings file: " & jsonFile
        end if
        f = nothing
		fso = nothing
        on error goto 0
    end sub 


    ]]>
        </script>
    </component>
</package>
